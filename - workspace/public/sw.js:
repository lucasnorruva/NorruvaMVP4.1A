
// --- File: public/sw.js ---

const CACHE_NAME = 'norruva-dpp-cache-v1.3'; // Increment version for cache busting
const OFFLINE_URL = '/offline.html'; // Ensure this file exists in public/
const ASSETS_TO_CACHE = [
  OFFLINE_URL,
  '/manifest.json',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
  // Add other critical static assets like logo, main font files if self-hosted, etc.
  // Be mindful of caching too much or things that change frequently if not handled by versioning.
  // '/images/logo.svg', 
  // '/fonts/inter-v12-latin-regular.woff2',
  // '/css/globals.css', // Next.js handles CSS chunking, so direct caching might be tricky/redundant
];

// Install event: cache core assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[Service Worker] Pre-caching offline page and core assets');
        return cache.addAll(ASSETS_TO_CACHE);
      })
      .then(() => {
        console.log('[Service Worker] Core assets cached successfully');
        return self.skipWaiting(); // Activate the new service worker immediately
      })
      .catch(error => {
        console.error('[Service Worker] Failed to cache core assets:', error);
      })
  );
});

// Activate event: clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('[Service Worker] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('[Service Worker] Activated and old caches cleaned.');
      return self.clients.claim(); // Take control of all open clients
    })
  );
});

// Fetch event: serve from cache, fallback to network, then offline page
self.addEventListener('fetch', (event) => {
  // We only want to handle navigation requests for the offline fallback.
  // For other assets (CSS, JS, images), Next.js's own caching or a more sophisticated strategy is better.
  if (event.request.mode === 'navigate') {
    event.respondWith(
      (async () => {
        try {
          // Try the network first
          const networkResponse = await fetch(event.request);
          return networkResponse;
        } catch (error) {
          // Network failed, try to serve from cache
          console.log('[Service Worker] Network request failed, trying cache for:', event.request.url);
          const cache = await caches.open(CACHE_NAME);
          const cachedResponse = await cache.match(event.request);
          if (cachedResponse) {
            return cachedResponse;
          }
          // If the request is for a page and it's not in cache, serve the offline page.
          const offlinePageResponse = await cache.match(OFFLINE_URL);
          if (offlinePageResponse) {
            return offlinePageResponse;
          }
          // If offline page itself is not cached (should not happen if install worked),
          // return a basic text response as a last resort.
          return new Response("You are offline and the offline page is not available.", {
            headers: { 'Content-Type': 'text/plain' }
          });
        }
      })()
    );
  } else if (ASSETS_TO_CACHE.some(assetUrl => event.request.url.endsWith(assetUrl))) {
    // For core assets specifically listed for caching, use cache-first strategy
    event.respondWith(
      caches.match(event.request)
        .then((cachedResponse) => {
          if (cachedResponse) {
            return cachedResponse;
          }
          return fetch(event.request).then((networkResponse) => {
            // Optionally, cache newly fetched core assets if they were missed during install
            // Be careful with this, as it might cache dynamic content if not scoped properly.
            // For now, we rely on the install step for core assets.
            return networkResponse;
          });
        })
    );
  }
  // For other requests (e.g., API calls, Next.js data fetches, dynamic imports),
  // let them go to the network. Service worker is not intercepting them here.
  // This allows Next.js to handle its own data fetching and client-side navigation logic.
});
